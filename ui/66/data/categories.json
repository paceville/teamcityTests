{"uid":"4b4757e66a1912dae1a509f688f20b0f","children":[{"name":"Product defects","children":[{"name":"\nMultiple Failures (1 failure)\n-- failure 1 --\nExpecting actual:\n  Project(name=test_irUHmnxmHR, id=test_fSaIdhmkYw, locator=_Root)\nto be equal to:\n  Project(name=test_noTusHxAap, id=test_JEtcdlPisj, locator=_Root)\nwhen recursively comparing field by field, but found the following 2 differences:\n\nfield/property 'id' differ:\n- actual value  : \"test_fSaIdhmkYw\"\n- expected value: \"test_JEtcdlPisj\"\nCompared objects have java types and were thus compared with equals method\n\nfield/property 'name' differ:\n- actual value  : \"test_irUHmnxmHR\"\n- expected value: \"test_noTusHxAap\"\nCompared objects have java types and were thus compared with equals method\n\nThe recursive comparison was performed with this configuration:\n- no equals methods were used in the comparison EXCEPT for java JDK types since introspecting JDK types is forbidden in java 17+ (use withEqualsForType to register a specific way to compare a JDK type if you need it)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\nat TeamcityCreateProjectTest.lambda$userCreatesProjectTest$0(TeamcityCreateProjectTest.java:47)","children":[{"name":"User should be able to create a new project","uid":"9d05b6bb3ecd6d","parentUid":"e0522d309831bc4e9a70d424ee2de22e","status":"failed","time":{"start":1744675524424,"stop":1744675529958,"duration":5534},"flaky":false,"newFailed":true,"newPassed":false,"newBroken":false,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":["regression","positive"]}],"uid":"e0522d309831bc4e9a70d424ee2de22e"}],"uid":"8fb3a91ba5aaf9de24cc8a92edc82b5d"},{"name":"Test defects","children":[{"name":"Cannot invoke \"com.example.teamcity.ui.pages.admin.CreateBuildTypePage.openProjectViaUi(String)\" because \"this.createBuildTypePage\" is null","children":[{"name":"User should be able to create a new build configuration via UI clicks","uid":"315026258d079fab","parentUid":"a84cdedad21724f6209ddaff8ba97a2f","status":"broken","time":{"start":1744675572660,"stop":1744675576374,"duration":3714},"flaky":true,"newFailed":false,"newPassed":false,"newBroken":true,"retriesCount":0,"retriesStatusChange":false,"parameters":[],"tags":["regression","positive"]}],"uid":"a84cdedad21724f6209ddaff8ba97a2f"},{"name":"Failed to create new instance of class com.example.teamcity.ui.setup.FirstStartPage","children":[{"name":"setupTeamCityServerTest()","uid":"6785f13132a01130","parentUid":"8710c686c9bc6a083f8fc79e2167afc8","status":"broken","time":{"start":1744675576410,"stop":1744675759472,"duration":183062},"flaky":false,"newFailed":false,"newPassed":false,"newBroken":false,"retriesCount":1,"retriesStatusChange":true,"parameters":[],"tags":["Setup"]}],"uid":"8710c686c9bc6a083f8fc79e2167afc8"}],"uid":"bdbf199525818fae7a8651db9eafe741"}],"name":"categories"}