{"uid":"5ee92dbb5e3ae7f7","name":"User should be able to create a new project","fullName":"com.example.teamcity.api.TeamcityCreateProjectTest.userCreatesProjectTest","historyId":"237a189b2f33677c6b57f42b5bda076c","time":{"start":1744675529516,"stop":1744675535121,"duration":5605},"description":"","status":"failed","statusMessage":"\nMultiple Failures (1 failure)\n-- failure 1 --\nExpecting actual:\n  Project(name=test_NtnGYokIxT, id=test_bmhTZzWJeX, locator=_Root)\nto be equal to:\n  Project(name=test_qPChEEDJqJ, id=test_ZlBiWjMkYa, locator=_Root)\nwhen recursively comparing field by field, but found the following 2 differences:\n\nfield/property 'id' differ:\n- actual value  : \"test_bmhTZzWJeX\"\n- expected value: \"test_ZlBiWjMkYa\"\nCompared objects have java types and were thus compared with equals method\n\nfield/property 'name' differ:\n- actual value  : \"test_NtnGYokIxT\"\n- expected value: \"test_qPChEEDJqJ\"\nCompared objects have java types and were thus compared with equals method\n\nThe recursive comparison was performed with this configuration:\n- no equals methods were used in the comparison EXCEPT for java JDK types since introspecting JDK types is forbidden in java 17+ (use withEqualsForType to register a specific way to compare a JDK type if you need it)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\nat TeamcityCreateProjectTest.lambda$userCreatesProjectTest$0(TeamcityCreateProjectTest.java:47)","statusTrace":"org.assertj.core.error.AssertJMultipleFailuresError: \nMultiple Failures (1 failure)\n-- failure 1 --\nExpecting actual:\n  Project(name=test_NtnGYokIxT, id=test_bmhTZzWJeX, locator=_Root)\nto be equal to:\n  Project(name=test_qPChEEDJqJ, id=test_ZlBiWjMkYa, locator=_Root)\nwhen recursively comparing field by field, but found the following 2 differences:\n\nfield/property 'id' differ:\n- actual value  : \"test_bmhTZzWJeX\"\n- expected value: \"test_ZlBiWjMkYa\"\nCompared objects have java types and were thus compared with equals method\n\nfield/property 'name' differ:\n- actual value  : \"test_NtnGYokIxT\"\n- expected value: \"test_qPChEEDJqJ\"\nCompared objects have java types and were thus compared with equals method\n\nThe recursive comparison was performed with this configuration:\n- no equals methods were used in the comparison EXCEPT for java JDK types since introspecting JDK types is forbidden in java 17+ (use withEqualsForType to register a specific way to compare a JDK type if you need it)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\nat TeamcityCreateProjectTest.lambda$userCreatesProjectTest$0(TeamcityCreateProjectTest.java:47)\n\tat com.example.teamcity.api.TeamcityCreateProjectTest.lambda$userCreatesProjectTest$0(TeamcityCreateProjectTest.java:49)\n\tat io.qameta.allure.Allure.lambda$step$0(Allure.java:113)\n\tat io.qameta.allure.Allure.lambda$step$1(Allure.java:127)\n\tat io.qameta.allure.Allure.step(Allure.java:181)\n\tat io.qameta.allure.Allure.step(Allure.java:125)\n\tat io.qameta.allure.Allure.step(Allure.java:112)\n\tat com.example.teamcity.api.TeamcityCreateProjectTest.userCreatesProjectTest(TeamcityCreateProjectTest.java:41)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:569)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"","status":"failed","statusMessage":"\nMultiple Failures (1 failure)\n-- failure 1 --\nExpecting actual:\n  Project(name=test_NtnGYokIxT, id=test_bmhTZzWJeX, locator=_Root)\nto be equal to:\n  Project(name=test_qPChEEDJqJ, id=test_ZlBiWjMkYa, locator=_Root)\nwhen recursively comparing field by field, but found the following 2 differences:\n\nfield/property 'id' differ:\n- actual value  : \"test_bmhTZzWJeX\"\n- expected value: \"test_ZlBiWjMkYa\"\nCompared objects have java types and were thus compared with equals method\n\nfield/property 'name' differ:\n- actual value  : \"test_NtnGYokIxT\"\n- expected value: \"test_qPChEEDJqJ\"\nCompared objects have java types and were thus compared with equals method\n\nThe recursive comparison was performed with this configuration:\n- no equals methods were used in the comparison EXCEPT for java JDK types since introspecting JDK types is forbidden in java 17+ (use withEqualsForType to register a specific way to compare a JDK type if you need it)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\nat TeamcityCreateProjectTest.lambda$userCreatesProjectTest$0(TeamcityCreateProjectTest.java:47)","statusTrace":"org.assertj.core.error.AssertJMultipleFailuresError: \nMultiple Failures (1 failure)\n-- failure 1 --\nExpecting actual:\n  Project(name=test_NtnGYokIxT, id=test_bmhTZzWJeX, locator=_Root)\nto be equal to:\n  Project(name=test_qPChEEDJqJ, id=test_ZlBiWjMkYa, locator=_Root)\nwhen recursively comparing field by field, but found the following 2 differences:\n\nfield/property 'id' differ:\n- actual value  : \"test_bmhTZzWJeX\"\n- expected value: \"test_ZlBiWjMkYa\"\nCompared objects have java types and were thus compared with equals method\n\nfield/property 'name' differ:\n- actual value  : \"test_NtnGYokIxT\"\n- expected value: \"test_qPChEEDJqJ\"\nCompared objects have java types and were thus compared with equals method\n\nThe recursive comparison was performed with this configuration:\n- no equals methods were used in the comparison EXCEPT for java JDK types since introspecting JDK types is forbidden in java 17+ (use withEqualsForType to register a specific way to compare a JDK type if you need it)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\nat TeamcityCreateProjectTest.lambda$userCreatesProjectTest$0(TeamcityCreateProjectTest.java:47)\n\tat com.example.teamcity.api.TeamcityCreateProjectTest.lambda$userCreatesProjectTest$0(TeamcityCreateProjectTest.java:49)\n\tat io.qameta.allure.Allure.lambda$step$0(Allure.java:113)\n\tat io.qameta.allure.Allure.lambda$step$1(Allure.java:127)\n\tat io.qameta.allure.Allure.step(Allure.java:181)\n\tat io.qameta.allure.Allure.step(Allure.java:125)\n\tat io.qameta.allure.Allure.step(Allure.java:112)\n\tat com.example.teamcity.api.TeamcityCreateProjectTest.userCreatesProjectTest(TeamcityCreateProjectTest.java:41)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:569)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n","steps":[{"name":"Create user","time":{"start":1744675529712,"stop":1744675532664,"duration":2952},"status":"passed","steps":[],"attachments":[{"uid":"e105526e1b30509f","name":"Request","source":"e105526e1b30509f.html","type":"text/html","size":1381},{"uid":"6efc8553a30ea0c2","name":"HTTP/1.1 200 ","source":"6efc8553a30ea0c2.html","type":"text/html","size":2088}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"Create a new project by user","time":{"start":1744675532671,"stop":1744675533754,"duration":1083},"status":"passed","steps":[],"attachments":[{"uid":"9803c2bf6e4f87de","name":"Request","source":"9803c2bf6e4f87de.html","type":"text/html","size":965},{"uid":"4f3b2ed5bc63fe95","name":"HTTP/1.1 200 ","source":"4f3b2ed5bc63fe95.html","type":"text/html","size":2225}],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":2,"hasContent":true},{"name":"check project was created successfully with correct data","time":{"start":1744675533754,"stop":1744675535102,"duration":1348},"status":"failed","statusMessage":"\nMultiple Failures (1 failure)\n-- failure 1 --\nExpecting actual:\n  Project(name=test_NtnGYokIxT, id=test_bmhTZzWJeX, locator=_Root)\nto be equal to:\n  Project(name=test_qPChEEDJqJ, id=test_ZlBiWjMkYa, locator=_Root)\nwhen recursively comparing field by field, but found the following 2 differences:\n\nfield/property 'id' differ:\n- actual value  : \"test_bmhTZzWJeX\"\n- expected value: \"test_ZlBiWjMkYa\"\nCompared objects have java types and were thus compared with equals method\n\nfield/property 'name' differ:\n- actual value  : \"test_NtnGYokIxT\"\n- expected value: \"test_qPChEEDJqJ\"\nCompared objects have java types and were thus compared with equals method\n\nThe recursive comparison was performed with this configuration:\n- no equals methods were used in the comparison EXCEPT for java JDK types since introspecting JDK types is forbidden in java 17+ (use withEqualsForType to register a specific way to compare a JDK type if you need it)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\nat TeamcityCreateProjectTest.lambda$userCreatesProjectTest$0(TeamcityCreateProjectTest.java:47)","statusTrace":"org.assertj.core.error.AssertJMultipleFailuresError: \nMultiple Failures (1 failure)\n-- failure 1 --\nExpecting actual:\n  Project(name=test_NtnGYokIxT, id=test_bmhTZzWJeX, locator=_Root)\nto be equal to:\n  Project(name=test_qPChEEDJqJ, id=test_ZlBiWjMkYa, locator=_Root)\nwhen recursively comparing field by field, but found the following 2 differences:\n\nfield/property 'id' differ:\n- actual value  : \"test_bmhTZzWJeX\"\n- expected value: \"test_ZlBiWjMkYa\"\nCompared objects have java types and were thus compared with equals method\n\nfield/property 'name' differ:\n- actual value  : \"test_NtnGYokIxT\"\n- expected value: \"test_qPChEEDJqJ\"\nCompared objects have java types and were thus compared with equals method\n\nThe recursive comparison was performed with this configuration:\n- no equals methods were used in the comparison EXCEPT for java JDK types since introspecting JDK types is forbidden in java 17+ (use withEqualsForType to register a specific way to compare a JDK type if you need it)\n- these types were compared with the following comparators:\n  - java.lang.Double -> DoubleComparator[precision=1.0E-15]\n  - java.lang.Float -> FloatComparator[precision=1.0E-6]\n  - java.nio.file.Path -> lexicographic comparator (Path natural order)\n- actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).\n- the introspection strategy used was: DefaultRecursiveComparisonIntrospectionStrategy\nat TeamcityCreateProjectTest.lambda$userCreatesProjectTest$0(TeamcityCreateProjectTest.java:47)\n\tat com.example.teamcity.api.TeamcityCreateProjectTest.lambda$userCreatesProjectTest$0(TeamcityCreateProjectTest.java:49)\n\tat io.qameta.allure.Allure.lambda$step$0(Allure.java:113)\n\tat io.qameta.allure.Allure.lambda$step$1(Allure.java:127)\n\tat io.qameta.allure.Allure.step(Allure.java:181)\n\tat io.qameta.allure.Allure.step(Allure.java:125)\n\tat io.qameta.allure.Allure.step(Allure.java:112)\n\tat com.example.teamcity.api.TeamcityCreateProjectTest.userCreatesProjectTest(TeamcityCreateProjectTest.java:41)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:569)\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:767)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:156)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:147)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:86)\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(InterceptingExecutableInvoker.java:103)\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.lambda$invoke$0(InterceptingExecutableInvoker.java:93)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:92)\n\tat org.junit.jupiter.engine.execution.InterceptingExecutableInvoker.invoke(InterceptingExecutableInvoker.java:86)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$8(TestMethodTestDescriptor.java:217)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:213)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:138)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:156)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:160)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:146)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:144)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:100)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:198)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:169)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:93)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:58)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:141)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:57)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:103)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:85)\n\tat org.junit.platform.launcher.core.DelegatingLauncher.execute(DelegatingLauncher.java:47)\n\tat org.apache.maven.surefire.junitplatform.LazyLauncher.execute(LazyLauncher.java:56)\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.execute(JUnitPlatformProvider.java:184)\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invokeAllTests(JUnitPlatformProvider.java:148)\n\tat org.apache.maven.surefire.junitplatform.JUnitPlatformProvider.invoke(JUnitPlatformProvider.java:122)\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:385)\n\tat org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)\n\tat org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:507)\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:495)\n","steps":[],"attachments":[{"uid":"3d134dd2275728da","name":"Request","source":"3d134dd2275728da.html","type":"text/html","size":604},{"uid":"b2f8dd8fa441b6a8","name":"HTTP/1.1 200 ","source":"b2f8dd8fa441b6a8.html","type":"text/html","size":2225}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":2,"hasContent":true}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":3,"attachmentsCount":6,"hasContent":true},"afterStages":[],"labels":[{"name":"tag","value":"regression"},{"name":"tag","value":"positive"},{"name":"junit.platform.uniqueid","value":"[engine:junit-jupiter]/[class:com.example.teamcity.api.TeamcityCreateProjectTest]/[method:userCreatesProjectTest()]"},{"name":"host","value":"fv-az1913-699"},{"name":"thread","value":"4125@fv-az1913-699.main(1)"},{"name":"framework","value":"junit-platform"},{"name":"language","value":"java"},{"name":"package","value":"com.example.teamcity.api.TeamcityCreateProjectTest"},{"name":"testClass","value":"com.example.teamcity.api.TeamcityCreateProjectTest"},{"name":"testMethod","value":"userCreatesProjectTest"},{"name":"suite","value":"com.example.teamcity.api.TeamcityCreateProjectTest"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":0,"skipped":0,"passed":31,"unknown":0,"total":32},"items":[{"uid":"db4d119884ea3419","reportUrl":"https://paceville.github.io/teamcityTests/api/65//#testresult/db4d119884ea3419","status":"passed","time":{"start":1744673519819,"stop":1744673525207,"duration":5388}},{"uid":"76dd24c4212fe25d","reportUrl":"https://paceville.github.io/teamcityTests/api/64//#testresult/76dd24c4212fe25d","status":"passed","time":{"start":1744672334145,"stop":1744672339786,"duration":5641}},{"uid":"60dfb137ad70cf3c","reportUrl":"https://paceville.github.io/teamcityTests/api/63//#testresult/60dfb137ad70cf3c","status":"passed","time":{"start":1744671295901,"stop":1744671301635,"duration":5734}},{"uid":"f82704281c6eccd5","reportUrl":"https://paceville.github.io/teamcityTests/api/62//#testresult/f82704281c6eccd5","status":"passed","time":{"start":1744669720464,"stop":1744669725984,"duration":5520}},{"uid":"ff8593573d78897a","reportUrl":"https://paceville.github.io/teamcityTests/api/61//#testresult/ff8593573d78897a","status":"passed","time":{"start":1744668498719,"stop":1744668504333,"duration":5614}},{"uid":"57b8a1292e2d132","reportUrl":"https://paceville.github.io/teamcityTests/api/60//#testresult/57b8a1292e2d132","status":"passed","time":{"start":1744667701304,"stop":1744667707107,"duration":5803}},{"uid":"9f811a92a3b8f43b","reportUrl":"https://paceville.github.io/teamcityTests/api/59//#testresult/9f811a92a3b8f43b","status":"passed","time":{"start":1744666933662,"stop":1744666938739,"duration":5077}},{"uid":"4c48408c946e3d6e","reportUrl":"https://paceville.github.io/teamcityTests/api/58//#testresult/4c48408c946e3d6e","status":"passed","time":{"start":1744665770198,"stop":1744665775044,"duration":4846}},{"uid":"1be13e3a55dc475","reportUrl":"https://paceville.github.io/teamcityTests/api/57//#testresult/1be13e3a55dc475","status":"passed","time":{"start":1744664571647,"stop":1744664577530,"duration":5883}},{"uid":"65c7b29718e5200","reportUrl":"https://paceville.github.io/teamcityTests/api/56//#testresult/65c7b29718e5200","status":"passed","time":{"start":1744663329824,"stop":1744663334731,"duration":4907}},{"uid":"2c0389f8badab4d8","reportUrl":"https://paceville.github.io/teamcityTests/api/55//#testresult/2c0389f8badab4d8","status":"passed","time":{"start":1744662090111,"stop":1744662095414,"duration":5303}},{"uid":"dec9099a01337860","reportUrl":"https://paceville.github.io/teamcityTests/api/54//#testresult/dec9099a01337860","status":"passed","time":{"start":1744661113510,"stop":1744661118911,"duration":5401}},{"uid":"cc4900c5342e0d0d","reportUrl":"https://paceville.github.io/teamcityTests/api/53//#testresult/cc4900c5342e0d0d","status":"passed","time":{"start":1744660468223,"stop":1744660473592,"duration":5369}},{"uid":"983e669639642fc2","reportUrl":"https://paceville.github.io/teamcityTests/api/52//#testresult/983e669639642fc2","status":"passed","time":{"start":1744658835084,"stop":1744658840407,"duration":5323}},{"uid":"a34d88044cc5a29d","reportUrl":"https://paceville.github.io/teamcityTests/api/51//#testresult/a34d88044cc5a29d","status":"passed","time":{"start":1744658554405,"stop":1744658559330,"duration":4925}},{"uid":"bcf53df8bdde447e","reportUrl":"https://paceville.github.io/teamcityTests/api/50//#testresult/bcf53df8bdde447e","status":"passed","time":{"start":1744658171444,"stop":1744658176393,"duration":4949}},{"uid":"f2544382bfc98758","reportUrl":"https://paceville.github.io/teamcityTests/api/49//#testresult/f2544382bfc98758","status":"passed","time":{"start":1744657014795,"stop":1744657020480,"duration":5685}},{"uid":"114af0342cb0083","reportUrl":"https://paceville.github.io/teamcityTests/api/48//#testresult/114af0342cb0083","status":"passed","time":{"start":1744655745265,"stop":1744655751043,"duration":5778}},{"uid":"eaa9a9b4dbb0f2b2","reportUrl":"https://paceville.github.io/teamcityTests/api/46//#testresult/eaa9a9b4dbb0f2b2","status":"passed","time":{"start":1744641635849,"stop":1744641641054,"duration":5205}},{"uid":"34990151f5b6bce","reportUrl":"https://paceville.github.io/teamcityTests/api/45//#testresult/34990151f5b6bce","status":"passed","time":{"start":1744639882387,"stop":1744639887849,"duration":5462}}]},"tags":["regression","positive"]},"source":"5ee92dbb5e3ae7f7.json","parameterValues":[]}